schema @link(import: [ "@shareable", "@tag", "FieldSet" ], url: "https:\/\/specs.apollo.dev\/federation\/v2.7") {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface Error {
  message: String!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

"A connection to a list of items."
type AllUsersConnection {
  "A list of edges."
  edges: [AllUsersEdge!]
  "A flattened list of the nodes."
  nodes: [User]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type AllUsersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: User
}

type CreateOrderPayload {
  errors: [CreateOrderError!]
  order: Order
}

type CreateUserPayload {
  errors: [CreateUserError!]
  user: User
}

type Food {
  foodOrderItems: [FoodOrderItem]
  id: ID!
  name: String
  orders: [Order]
}

type FoodOrderItem {
  count: Int!
  food: Food
  foodId: Long!
  id: ID!
  order: Order
  orderId: Long!
}

type KeyValuePairOfStringAndObject {
  key: String!
}

type Mutation {
  createOrder(input: CreateOrderInput!): CreateOrderPayload!
  createUser(input: CreateUserInput): CreateUserPayload!
  updateUser(input: UpdateUserInput): UpdateUserPayload!
  updateUserImage(input: UpdateUserImageInput!): UpdateUserImagePayload!
}

type Order {
  foodOrderItems: [FoodOrderItem]
  foods: [Food]
  id: ID!
  orderNumber: String
  user: User
  userId: Long
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String @shareable
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean! @shareable
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean! @shareable
  "When paginating backwards, the cursor to continue."
  startCursor: String @shareable
}

type Permission {
  id: ID!
  key: String
  roles: [Role]
}

type Query {
  _service: _Service!
  "Searches for all users in the system."
  allUsers("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): AllUsersConnection
  allUsersByActivityLevel(level: UserActivityLevel!): [User]
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  "Searches for user by its id."
  userById(input: UserByIdInput): User
}

type Role {
  id: ID!
  name: String
  permissions: [Permission]
  users: [User]
}

type Subscription {
  onNewOrderWasCreated: Order
}

type UpdateUserImagePayload {
  errors: [UpdateUserImageError!]
  user: User
}

type UpdateUserPayload {
  errors: [UpdateUserError!]
  user: User
}

type User implements Node {
  activityLevel: UserActivityLevel!
  birthDateTime: DateTime
  id: ID!
  imageFileName: String
  roles: [Role]
  userName: String
}

type UserAlreadyExistsError implements Error {
  message: String!
}

type UserNotFoundError implements Error {
  message: String!
  userId: Long!
}

type ValidationError implements Error {
  errors: [ValidationFailure]
  message: String!
}

type ValidationFailure {
  errorCode: String
  errorMessage: String
  formattedMessagePlaceholderValues: [KeyValuePairOfStringAndObject!]
  propertyName: String
  severity: Severity!
}

"This type provides a field named sdl: String! which exposes the SDL of the service's schema. This SDL (schema definition language) is a printed version of the service's schema including the annotations of federation directives. This SDL does not include the additions of the federation spec."
type _Service {
  sdl: String!
}

union CreateOrderError = ValidationError

union CreateUserError = UserAlreadyExistsError | ValidationError

union UpdateUserError = UserNotFoundError | ValidationError

union UpdateUserImageError = UserNotFoundError

input BooleanInputType {
  and: [BooleanInputType!]
  or: [BooleanInputType!]
  _this: BooleanOperationFilterInput
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input CreateOrderInput {
  userId: ID!
}

input CreateUserInput {
  activityLevel: UserActivityLevel!
  birthDateTime: DateTime
  userName: String!
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringInputType {
  and: [StringInputType!]
  or: [StringInputType!]
  _this: StringOperationFilterInput
  length: IntOperationFilterInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UpdateUserImageInput {
  file: Upload!
  userId: ID!
}

input UpdateUserInput {
  activityLevel: UserActivityLevel! = BASIC
  birthDateTime: DateTime
  id: ID!
}

input UserByIdInput {
  id: Long!
}

enum Severity {
  ERROR
  WARNING
  INFO
}

enum UserActivityLevel {
  UNKNOWN
  BASIC
  ADVANCED
  PRO
}

"Links definitions within the document to external schemas."
directive @link("Gets optional list of imported element names." import: [String!] "Gets imported specification url." url: String!) repeatable on SCHEMA

"Indicates that given object and\/or field can be resolved by multiple subgraphs."
directive @shareable repeatable on OBJECT | FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"Scalar representing a set of fields."
scalar FieldSet

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"The `Upload` scalar type represents a file upload."
scalar Upload

"The _Any scalar is used to pass representations of entities from external services into the root _entities field for execution. Validation of the _Any scalar is done by matching the __typename and @external fields defined in the schema."
scalar _Any