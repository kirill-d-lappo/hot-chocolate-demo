schema @link(import: [ "@shareable", "@tag", "FieldSet" ], url: "https:\/\/specs.apollo.dev\/federation\/v2.7") {
  query: Query
  mutation: Mutation
}

interface Error {
  message: String!
}

"A connection to a list of items."
type AllUsersConnection {
  "A list of edges."
  edges: [AllUsersEdge!]
  "A flattened list of the nodes."
  nodes: [User]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type AllUsersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: User
}

type CreateUserPayload {
  errors: [CreateUserError!]
  userId: Long
}

type KeyValuePairOfStringAndObject {
  key: String!
}

type KeyValuePairOfStringAndString__ {
  key: String!
  value: [String!]!
}

type Mutation {
  createUser(input: CreateUserInput): CreateUserPayload!
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String @shareable
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean! @shareable
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean! @shareable
  "When paginating backwards, the cursor to continue."
  startCursor: String @shareable
}

type Query {
  _service: _Service!
  "Searches for all users in the system."
  allUsers("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [UserSortInput!] where: UserFilterInput): AllUsersConnection
  "Searches for user by its id."
  userById(input: UserByIdInput): User
}

type Role {
  id: Long!
  name: String
}

"A connection to a list of items."
type RolesConnection {
  "A list of edges."
  edges: [RolesEdge!]
  "A flattened list of the nodes."
  nodes: [Role]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type RolesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Role
}

type User {
  activityLevel: UserActivityLevel!
  birthDateTime: DateTime
  id: Long!
  "Roles that were assigned to a user."
  roles("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): RolesConnection
  userName: String
}

type UserAlreadyExistsError implements Error {
  message: String!
}

type ValidationError implements Error {
  message: String!
  validationResult: ValidationResult
}

type ValidationFailure {
  errorCode: String
  errorMessage: String
  formattedMessagePlaceholderValues: [KeyValuePairOfStringAndObject!]
  propertyName: String
  severity: Severity!
}

type ValidationResult {
  errors: [ValidationFailure]
  isValid: Boolean!
  ruleSetsExecuted: [String]
  toDictionary: [KeyValuePairOfStringAndString__!]
}

"This type provides a field named sdl: String! which exposes the SDL of the service's schema. This SDL (schema definition language) is a printed version of the service's schema including the annotations of federation directives. This SDL does not include the additions of the federation spec."
type _Service {
  sdl: String!
}

union CreateUserError = UserAlreadyExistsError | ValidationError

input BooleanInputType {
  and: [BooleanInputType!]
  or: [BooleanInputType!]
  _this: BooleanOperationFilterInput
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input CreateUserInput {
  birthDateTime: DateTime!
  userName: String!
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input LongOperationFilterInput {
  eq: Long
  neq: Long
  in: [Long]
  nin: [Long]
  gt: Long
  ngt: Long
  gte: Long
  ngte: Long
  lt: Long
  nlt: Long
  lte: Long
  nlte: Long
}

input StringInputType {
  and: [StringInputType!]
  or: [StringInputType!]
  _this: StringOperationFilterInput
  length: IntOperationFilterInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UserActivityLevelOperationFilterInput {
  eq: UserActivityLevel
  neq: UserActivityLevel
  in: [UserActivityLevel!]
  nin: [UserActivityLevel!]
}

input UserByIdInput {
  id: Long!
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  id: LongOperationFilterInput
  userName: StringInputType
  birthDateTime: DateTimeOperationFilterInput
  activityLevel: UserActivityLevelOperationFilterInput
}

input UserSortInput {
  id: SortEnumType
  userName: SortEnumType
  birthDateTime: SortEnumType
  activityLevel: SortEnumType
}

enum Severity {
  ERROR
  WARNING
  INFO
}

enum SortEnumType {
  ASC
  DESC
}

enum UserActivityLevel {
  BASIC
  ADVANCED
  PRO
}

"Links definitions within the document to external schemas."
directive @link("Gets optional list of imported element names." import: [String!] "Gets imported specification url." url: String!) repeatable on SCHEMA

"Indicates that given object and\/or field can be resolved by multiple subgraphs."
directive @shareable repeatable on OBJECT | FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"Scalar representing a set of fields."
scalar FieldSet

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"The _Any scalar is used to pass representations of entities from external services into the root _entities field for execution. Validation of the _Any scalar is done by matching the __typename and @external fields defined in the schema."
scalar _Any