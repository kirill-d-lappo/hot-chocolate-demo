schema @link(import: [ "@key", "FieldSet" ], url: "https:\/\/specs.apollo.dev\/federation\/v2.5") {
  query: Query
  mutation: Mutation
}

interface Error {
  message: String!
}

"A connection to a list of items."
type AllBoolValuesConnection {
  "A list of edges."
  edges: [AllBoolValuesEdge!]
  "A flattened list of the nodes."
  nodes: [Boolean]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type AllBoolValuesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Boolean
}

"A segment of a collection."
type AllRolesCollectionSegment {
  "A flattened list of the items."
  items: [RoleEntity]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
}

"A connection to a list of items."
type AllStringValuesConnection {
  "A list of edges."
  edges: [AllStringValuesEdge!]
  "A flattened list of the nodes."
  nodes: [String]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type AllStringValuesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: String
}

"A connection to a list of items."
type AllUserRolesConnection {
  "A list of edges."
  edges: [AllUserRolesEdge!]
  "A flattened list of the nodes."
  nodes: [UserRoleEntity]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type AllUserRolesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UserRoleEntity
}

"A connection to a list of items."
type AllUsersConnection {
  "A list of edges."
  edges: [AllUsersEdge!]
  "A flattened list of the nodes."
  nodes: [UserEntity]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type AllUsersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UserEntity
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

type CreateUserPayload {
  errors: [CreateUserError!] @cost(weight: "10")
  userEntity: UserEntity
}

type KeyValuePairOfStringAndObject {
  key: String!
}

type KeyValuePairOfStringAndString__ {
  key: String!
  value: [String!]!
}

type Mutation {
  createUser(input: CreateUserInput): CreateUserPayload! @cost(weight: "10")
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
  allBoolValues("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int where: BooleanInputType @cost(weight: "10")): AllBoolValuesConnection @listSize(assumedSize: 50, slicingArguments: [ "first", "last" ], sizedFields: [ "edges", "nodes" ]) @cost(weight: "10")
  allRoles(order: [RoleEntitySortInput!] @cost(weight: "10") skip: Int take: Int where: RoleEntityFilterInput @cost(weight: "10")): AllRolesCollectionSegment @listSize(assumedSize: 50, slicingArguments: [ "take" ], sizedFields: [ "items" ]) @cost(weight: "10")
  allStringValues("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int where: StringInputType @cost(weight: "10")): AllStringValuesConnection @listSize(assumedSize: 50, slicingArguments: [ "first", "last" ], sizedFields: [ "edges", "nodes" ]) @cost(weight: "10")
  allUserRoles("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [UserRoleEntitySortInput!] @cost(weight: "10") where: UserRoleEntityFilterInput @cost(weight: "10")): AllUserRolesConnection @listSize(assumedSize: 50, slicingArguments: [ "first", "last" ], sizedFields: [ "edges", "nodes" ]) @cost(weight: "10")
  allUsers("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [UserEntitySortInput!] @cost(weight: "10") where: UserEntityFilterInput @cost(weight: "10")): AllUsersConnection @listSize(assumedSize: 50, slicingArguments: [ "first", "last" ], sizedFields: [ "edges", "nodes" ]) @cost(weight: "10")
  userByUserName(userName: String): UserByUserNameResult! @cost(weight: "10")
}

type RoleEntity @key(fields: "id") @key(fields: "id") {
  id: Long!
  name: String
  userRoles: [UserRoleEntity]
  users: [UserEntity]
}

type UserAlreadyExistsError implements Error {
  message: String!
}

type UserEntity @key(fields: "id") @key(fields: "id") {
  id: Long!
  roles: [RoleEntity]
  userName: String
  userRoles: [UserRoleEntity]
}

type UserNotFoundError implements Error {
  message: String!
}

type UserRoleEntity @key(fields: "userId roleId") {
  role: RoleEntity
  roleId: Long!
  user: UserEntity
  userId: Long!
}

type ValidationError implements Error {
  message: String!
  validationResult: ValidationResult
}

type ValidationFailure {
  errorCode: String
  errorMessage: String
  formattedMessagePlaceholderValues: [KeyValuePairOfStringAndObject!]
  propertyName: String
  severity: Severity!
}

type ValidationResult {
  errors: [ValidationFailure]
  isValid: Boolean!
  ruleSetsExecuted: [String]
  toDictionary: [KeyValuePairOfStringAndString__!]
}

"This type provides a field named sdl: String! which exposes the SDL of the service's schema. This SDL (schema definition language) is a printed version of the service's schema including the annotations of federation directives. This SDL does not include the additions of the federation spec."
type _Service {
  sdl: String!
}

union CreateUserError = UserAlreadyExistsError | ValidationError

union UserByUserNameResult = UserEntity | UserNotFoundError

"Union of all types that key directive applied. This information is needed by the Apollo federation gateway."
union _Entity = RoleEntity | UserRoleEntity | UserEntity

input BooleanInputType {
  and: [BooleanInputType!]
  or: [BooleanInputType!]
  _this: BooleanOperationFilterInput
}

input BooleanOperationFilterInput {
  eq: Boolean @cost(weight: "10")
  neq: Boolean @cost(weight: "10")
}

input CreateUserInput {
  birthDateTime: DateTime!
  userName: String
}

input IntOperationFilterInput {
  eq: Int @cost(weight: "10")
  neq: Int @cost(weight: "10")
  in: [Int] @cost(weight: "10")
  nin: [Int] @cost(weight: "10")
  gt: Int @cost(weight: "10")
  ngt: Int @cost(weight: "10")
  gte: Int @cost(weight: "10")
  ngte: Int @cost(weight: "10")
  lt: Int @cost(weight: "10")
  nlt: Int @cost(weight: "10")
  lte: Int @cost(weight: "10")
  nlte: Int @cost(weight: "10")
}

input ListFilterInputTypeOfRoleEntityFilterInput {
  all: RoleEntityFilterInput @cost(weight: "10")
  none: RoleEntityFilterInput @cost(weight: "10")
  some: RoleEntityFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfUserEntityFilterInput {
  all: UserEntityFilterInput @cost(weight: "10")
  none: UserEntityFilterInput @cost(weight: "10")
  some: UserEntityFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfUserRoleEntityFilterInput {
  all: UserRoleEntityFilterInput @cost(weight: "10")
  none: UserRoleEntityFilterInput @cost(weight: "10")
  some: UserRoleEntityFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input LongOperationFilterInput {
  eq: Long @cost(weight: "10")
  neq: Long @cost(weight: "10")
  in: [Long] @cost(weight: "10")
  nin: [Long] @cost(weight: "10")
  gt: Long @cost(weight: "10")
  ngt: Long @cost(weight: "10")
  gte: Long @cost(weight: "10")
  ngte: Long @cost(weight: "10")
  lt: Long @cost(weight: "10")
  nlt: Long @cost(weight: "10")
  lte: Long @cost(weight: "10")
  nlte: Long @cost(weight: "10")
}

input RoleEntityFilterInput {
  and: [RoleEntityFilterInput!]
  or: [RoleEntityFilterInput!]
  id: LongOperationFilterInput
  name: StringInputType
  users: ListFilterInputTypeOfUserEntityFilterInput
  userRoles: ListFilterInputTypeOfUserRoleEntityFilterInput
}

input RoleEntitySortInput {
  id: SortEnumType @cost(weight: "10")
  name: SortEnumType @cost(weight: "10")
}

input StringInputType {
  and: [StringInputType!]
  or: [StringInputType!]
  _this: StringOperationFilterInput
  length: IntOperationFilterInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String @cost(weight: "10")
  neq: String @cost(weight: "10")
  contains: String @cost(weight: "20")
  ncontains: String @cost(weight: "20")
  in: [String] @cost(weight: "10")
  nin: [String] @cost(weight: "10")
  startsWith: String @cost(weight: "20")
  nstartsWith: String @cost(weight: "20")
  endsWith: String @cost(weight: "20")
  nendsWith: String @cost(weight: "20")
}

input UserEntityFilterInput {
  and: [UserEntityFilterInput!]
  or: [UserEntityFilterInput!]
  id: LongOperationFilterInput
  userName: StringInputType
  roles: ListFilterInputTypeOfRoleEntityFilterInput
  userRoles: ListFilterInputTypeOfUserRoleEntityFilterInput
}

input UserEntitySortInput {
  id: SortEnumType @cost(weight: "10")
  userName: SortEnumType @cost(weight: "10")
}

input UserRoleEntityFilterInput {
  and: [UserRoleEntityFilterInput!]
  or: [UserRoleEntityFilterInput!]
  userId: LongOperationFilterInput
  roleId: LongOperationFilterInput
  user: UserEntityFilterInput
  role: RoleEntityFilterInput
}

input UserRoleEntitySortInput {
  userId: SortEnumType @cost(weight: "10")
  roleId: SortEnumType @cost(weight: "10")
  user: UserEntitySortInput @cost(weight: "10")
  role: RoleEntitySortInput @cost(weight: "10")
}

enum Severity {
  ERROR
  WARNING
  INFO
}

enum SortEnumType {
  ASC
  DESC
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"Used to indicate a combination of fields that can be used to uniquely identify and fetch an object or interface."
directive @key(fields: FieldSet! resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

"Links definitions within the document to external schemas."
directive @link("Gets optional list of imported element names." import: [String!] "Gets imported specification url." url: String!) repeatable on SCHEMA

"The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information."
directive @listSize("The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field." assumedSize: Int "The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error." requireOneSlicingArgument: Boolean! = true "The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields." sizedFields: [String!] "The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments." slicingArguments: [String!]) on FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"Scalar representing a set of fields."
scalar FieldSet

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"The _Any scalar is used to pass representations of entities from external services into the root _entities field for execution. Validation of the _Any scalar is done by matching the __typename and @external fields defined in the schema."
scalar _Any