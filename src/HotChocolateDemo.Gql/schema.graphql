schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface Error {
  message: String!
}

"A connection to a list of items."
type AllFoodsConnection {
  "A list of edges."
  edges: [AllFoodsEdge!]
  "A flattened list of the nodes."
  nodes: [Food]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type AllFoodsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Food
}

"A connection to a list of items."
type AllOrdersConnection {
  "A list of edges."
  edges: [AllOrdersEdge!]
  "A flattened list of the nodes."
  nodes: [Order]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type AllOrdersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Order
}

"A connection to a list of items."
type AllUsersConnection {
  "A list of edges."
  edges: [AllUsersEdge!]
  "A flattened list of the nodes."
  nodes: [User]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type AllUsersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: User
}

type CreateOrderPayload {
  errors: [CreateOrderError!]
  order: Order
}

type CreateUserPayload {
  errors: [CreateUserError!]
  user: User
}

type Food {
  foodOrderItems: [FoodOrderItem]
  id: Long!
  name: String
  orders: [Order]
}

type FoodOrderItem {
  count: Int!
  food: Food
  foodId: Long
  id: Long!
  order: Order
  orderId: Long!
}

type KeyValuePairOfStringAndObject {
  key: String!
}

type Mutation {
  createOrder(input: CreateOrderInput!): CreateOrderPayload!
  createUser(input: CreateUserInput): CreateUserPayload!
  updateUser(input: UpdateUserInput): UpdateUserPayload!
  updateUserImage(input: UpdateUserImageInput!): UpdateUserImagePayload!
}

type Order {
  creationSource: OrderCreationSource!
  foodOrderItems: [FoodOrderItem]
  foods: [Food]
  id: Long!
  orderNumber: String
  user: User
  userId: Long
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

type Permission {
  id: ID!
  key: String
  roles: [Role]
}

type Query {
  "Searches for all foods in the system."
  allFoods("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [FoodSortInput!] where: FoodFilterInput): AllFoodsConnection
  "Searches for all orders in the system."
  allOrders("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [OrderSortInput!] where: OrderFilterInput): AllOrdersConnection
  "Searches for all users in the system."
  allUsers("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): AllUsersConnection
  allUsersByActivityLevel(level: UserActivityLevel!): [User]
  "Searches for user by its id."
  userById(input: UserByIdInput): User
}

type Role {
  id: Long!
  name: String
  permissions: [Permission]
  users: [User]
}

type Subscription {
  onNewOrderWasCreated: Order
}

type UpdateUserImagePayload {
  errors: [UpdateUserImageError!]
  user: User
}

type UpdateUserPayload {
  errors: [UpdateUserError!]
  user: User
}

type User {
  activityLevel: UserActivityLevel!
  birthDateTime: DateTime
  id: Long!
  imageFileName: String
  roles: [Role]
  userName: String
}

type UserAlreadyExistsError implements Error {
  message: String!
}

type UserNotFoundError implements Error {
  message: String!
  userId: Long!
}

type ValidationError implements Error {
  errors: [ValidationFailure]
  message: String!
}

type ValidationFailure {
  errorCode: String
  errorMessage: String
  formattedMessagePlaceholderValues: [KeyValuePairOfStringAndObject!]
  propertyName: String
  severity: Severity!
}

union CreateOrderError = ValidationError

union CreateUserError = UserAlreadyExistsError | ValidationError

union UpdateUserError = UserNotFoundError | ValidationError

union UpdateUserImageError = UserNotFoundError

input BooleanInputType {
  and: [BooleanInputType!]
  or: [BooleanInputType!]
  _this: BooleanOperationFilterInput
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input CreateOrderInput {
  foodIds: [Long!]
  userId: ID!
}

input CreateUserInput {
  activityLevel: UserActivityLevel!
  birthDateTime: DateTime
  userName: String!
}

input FoodFilterInput {
  and: [FoodFilterInput!]
  or: [FoodFilterInput!]
  id: LongOperationFilterInput
  name: StringOperationFilterInput
  foodOrderItems: ListFilterInputTypeOfFoodOrderItemFilterInput
  orders: ListFilterInputTypeOfOrderFilterInput
}

input FoodOrderItemFilterInput {
  and: [FoodOrderItemFilterInput!]
  or: [FoodOrderItemFilterInput!]
  id: LongOperationFilterInput
  foodId: LongOperationFilterInput
  food: FoodFilterInput
  orderId: LongOperationFilterInput
  order: OrderFilterInput
  count: IntOperationFilterInput
}

input FoodSortInput {
  id: SortEnumType
  name: SortEnumType
}

input IdFilterInput {
  and: [IdFilterInput!]
  or: [IdFilterInput!]
  eq: Long
  neq: Long
  in: [Long]
  nin: [Long]
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ListFilterInputTypeOfFoodOrderItemFilterInput {
  all: FoodOrderItemFilterInput
  none: FoodOrderItemFilterInput
  some: FoodOrderItemFilterInput
  any: Boolean
}

input ListFilterInputTypeOfOrderFilterInput {
  all: OrderFilterInput
  none: OrderFilterInput
  some: OrderFilterInput
  any: Boolean
}

input LongOperationFilterInput {
  eq: Long
  neq: Long
  in: [Long]
  nin: [Long]
  gt: Long
  ngt: Long
  gte: Long
  ngte: Long
  lt: Long
  nlt: Long
  lte: Long
  nlte: Long
}

input OrderFilterInput {
  and: [OrderFilterInput!]
  or: [OrderFilterInput!]
  id: IdFilterInput
  orderNumber: OrderNumberFilterInput
  userId: IdFilterInput
}

input OrderNumberFilterInput {
  and: [OrderNumberFilterInput!]
  or: [OrderNumberFilterInput!]
  eq: String
  neq: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
}

input OrderSortInput {
  id: SortEnumType
  orderNumber: SortEnumType
}

input StringInputType {
  and: [StringInputType!]
  or: [StringInputType!]
  _this: StringOperationFilterInput
  length: IntOperationFilterInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UpdateUserImageInput {
  file: Upload!
  userId: ID!
}

input UpdateUserInput {
  activityLevel: UserActivityLevel! = BASIC
  birthDateTime: DateTime
  id: ID!
}

input UserBirthdayFilterInput {
  and: [UserBirthdayFilterInput!]
  or: [UserBirthdayFilterInput!]
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  ngt: DateTime
  ngte: DateTime
  lt: DateTime
  lte: DateTime
  nlt: DateTime
  nlte: DateTime
}

input UserByIdInput {
  id: Long!
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  id: IdFilterInput
  userName: UserNameFilterInput
  birthDateTime: UserBirthdayFilterInput
}

input UserNameFilterInput {
  and: [UserNameFilterInput!]
  or: [UserNameFilterInput!]
  eq: String
  neq: String
  in: String
  nin: String
  startsWith: String
  nstartsWith: String
}

input UserSortInput {
  id: SortEnumType
  userName: SortEnumType
}

enum OrderCreationSource {
  UNKNOWN
  FRONT_END
  THIRD_PARTY
}

enum Severity {
  ERROR
  WARNING
  INFO
}

enum SortEnumType {
  ASC
  DESC
}

enum UserActivityLevel {
  UNKNOWN
  BASIC
  ADVANCED
  PRO
}

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"The `TimeSpan` scalar represents an ISO-8601 compliant duration type."
scalar TimeSpan

"The `Upload` scalar type represents a file upload."
scalar Upload